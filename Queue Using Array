class myQueue {

    // Constructor
    int queue[];
    int front;
    int rear;
    int size;
    public myQueue(int n) {
        // Define Data Structures
        queue=new int[n];
        front=-1;
        rear=-1;
        size=n;
    }

    public boolean isEmpty() {
        // Check if queue is empty
        if(front==-1 || rear<front)
        {
            return true;
        }
        return false;
    }

    public boolean isFull() {
        // Check if queue is full
        if(size==(rear - front + 1) )
        {
            return true;
        }
        return false;
    }

    public void enqueue(int x) {
        // Enqueue
       if (isFull()) {
            //System.out.println("Queue Overflow! Cannot enqueue " + x);
            return;
        }

        if (isEmpty()) {
            front = 0;
            rear = 0;
        } else {
            rear++;
        }

        queue[rear] = x;
    }

    public void dequeue() {
        // Dequeue
        if(isEmpty())
        {
            return;
        }
         front++;
        if (front > rear) {
            // Reset queue when empty
            front = -1;
            rear = -1;
        }
    }

    public int getFront() {
        // Get front element
        if(isEmpty())
        {
            return -1;
        }
        return queue[front];
    }

    public int getRear() {
        // Get last element
         if(isEmpty())
        {
            return -1;
        }
        return queue[rear];
    }
}
