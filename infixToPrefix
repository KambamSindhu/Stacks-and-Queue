class Solution {
    public String infixToPrefix(String s) {
        
        String str=reverse(s);
        String  ans="";
        Stack<Character> st=new Stack<>();
       
        
        for(int i=0;i<str.length();i++)
        {
            char ch=str.charAt(i);
            if(ch>='a' && ch<='z' || ch>='A' && ch<='Z' || 
            ch>='0' && ch<='9')
            {
                ans+=ch;
            }
            else if(ch=='(')
            {
                st.push(ch);
            }
            else if(ch==')')
            {
                while(!st.isEmpty() && st.peek()!='(')
                {
                    ans+=st.pop();
                }
                if(!st.isEmpty()) st.pop();
            }
            else{
                while(!st.isEmpty() && shouldPop(st.peek(),ch))
                {
                    ans+=st.pop();
                }
                st.push(ch);
            }
        }
        while(!st.isEmpty())
        {
           ans+=st.pop();
        }
    return  reverse(ans);
    }
    public String reverse(String s)
    {
        String str="";
         for(int i=s.length()-1;i>=0;i--)
        {
            char ch=s.charAt(i);
            if(ch=='(')
            {
                str+=')';
            }
            else if(ch==')')
            {
                str+='(';
            }
            else{
                str+=ch;
            }
        }
        return str;
    }
    public boolean shouldPop(char topOfstack , char ch)
    {
        int p1=priority(topOfstack);
        int p2=priority(ch);
       if(topOfstack=='^' && ch=='^') return true;
        return p1>p2;
    }
     public int priority(char ch) {
        if(ch=='+' || ch=='-') return 1;
        else if(ch=='*' || ch=='/') return 2;
        else if(ch=='^') return 3;
        return -1;
    }
}
