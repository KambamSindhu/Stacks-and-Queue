class SpecialStack {
    Stack<Integer> st;
    int min;
    public SpecialStack() {
        st=new Stack<Integer>();
        min=1000000;
    }

    public void push(int x) {
        // Add an element to the top of Stack
        if(st.isEmpty())
        {
            st.push(x);
            min=x;
        }
       else if(min > x)
        {
           st.push(2 * x - min);
           min=x;
        }
        else{
            st.push(x);
        }
        
       return ;
    }

    public void pop() {
        // Remove the top element from the Stack
        if(!st.isEmpty())
        {
           int x=st.pop();
           if(x<min)
           {
               min = 2 * min - x;
           }
            
        }
    }

    public int peek() {
        // Returns top element of the Stack
        if(st.isEmpty())
        {
            return -1;
        }
        int top=st.peek();
        if(top>min)
        {
            return top;
        }
        return min;
    }

    boolean isEmpty() {
        // Check if the stack is empty
        if(st.isEmpty())
        {
            return true;
        }
        return false;
    }

    public int getMin() {
        // Finds minimum element of Stack
        if(st.isEmpty())
        {
            return -1;
        }
        return min;
    }
}
