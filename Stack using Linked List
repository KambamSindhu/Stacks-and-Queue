// Node class
/* class Node {
    int data;
    Node next;

    Node(int new_data) {
        data = new_data;
        next = null;
    }
} */

// Stack class
class myStack {
  
  private Node head;  
    public myStack() {
        head =null;
      }

    public boolean isEmpty() {
        // check if the queue is empty
      return head==null;
    }

    public void push(int x) {
        // Adds an element x at the rear of the queue.
        Node newNode=new Node(x);
       newNode.next=head;
       head=newNode;
       
    }

    public void pop() {
        // Removes the front element of the queue
       if (!isEmpty()) {
    head = head.next;
}
    }

    public int peek() {
        // Returns the front element of the queue.
        // If queue is empty, return -1.
        if(head==null)
        {
        return -1;
        }
        return head.data;
    }

    public int size() {
        // Returns the current size of the queue.
        Node temp=head;
        int cnt=0;
        
        while(temp!=null)
        {
            temp=temp.next;
                      cnt++;
        }
        
        return cnt;
    }
}
